/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SingerService } from "../singer.service";
import { SingerCreateInput } from "./SingerCreateInput";
import { Singer } from "./Singer";
import { SingerFindManyArgs } from "./SingerFindManyArgs";
import { SingerWhereUniqueInput } from "./SingerWhereUniqueInput";
import { SingerUpdateInput } from "./SingerUpdateInput";

export class SingerControllerBase {
  constructor(protected readonly service: SingerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Singer })
  async createSinger(@common.Body() data: SingerCreateInput): Promise<Singer> {
    return await this.service.createSinger({
      data: data,
      select: {
        bio: true,
        createdAt: true,
        dateOfBirth: true,
        description: true,
        id: true,
        name: true,
        photoUrl: true,
        trackId: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Singer] })
  @ApiNestedQuery(SingerFindManyArgs)
  async singers(@common.Req() request: Request): Promise<Singer[]> {
    const args = plainToClass(SingerFindManyArgs, request.query);
    return this.service.singers({
      ...args,
      select: {
        bio: true,
        createdAt: true,
        dateOfBirth: true,
        description: true,
        id: true,
        name: true,
        photoUrl: true,
        trackId: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Singer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async singer(
    @common.Param() params: SingerWhereUniqueInput
  ): Promise<Singer | null> {
    const result = await this.service.singer({
      where: params,
      select: {
        bio: true,
        createdAt: true,
        dateOfBirth: true,
        description: true,
        id: true,
        name: true,
        photoUrl: true,
        trackId: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Singer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSinger(
    @common.Param() params: SingerWhereUniqueInput,
    @common.Body() data: SingerUpdateInput
  ): Promise<Singer | null> {
    try {
      return await this.service.updateSinger({
        where: params,
        data: data,
        select: {
          bio: true,
          createdAt: true,
          dateOfBirth: true,
          description: true,
          id: true,
          name: true,
          photoUrl: true,
          trackId: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Singer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSinger(
    @common.Param() params: SingerWhereUniqueInput
  ): Promise<Singer | null> {
    try {
      return await this.service.deleteSinger({
        where: params,
        select: {
          bio: true,
          createdAt: true,
          dateOfBirth: true,
          description: true,
          id: true,
          name: true,
          photoUrl: true,
          trackId: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
