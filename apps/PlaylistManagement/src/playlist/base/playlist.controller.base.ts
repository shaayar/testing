/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlaylistService } from "../playlist.service";
import { PlaylistCreateInput } from "./PlaylistCreateInput";
import { Playlist } from "./Playlist";
import { PlaylistFindManyArgs } from "./PlaylistFindManyArgs";
import { PlaylistWhereUniqueInput } from "./PlaylistWhereUniqueInput";
import { PlaylistUpdateInput } from "./PlaylistUpdateInput";
import { TrackFindManyArgs } from "../../track/base/TrackFindManyArgs";
import { Track } from "../../track/base/Track";
import { TrackWhereUniqueInput } from "../../track/base/TrackWhereUniqueInput";

export class PlaylistControllerBase {
  constructor(protected readonly service: PlaylistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Playlist })
  async createPlaylist(
    @common.Body() data: PlaylistCreateInput
  ): Promise<Playlist> {
    return await this.service.createPlaylist({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Playlist] })
  @ApiNestedQuery(PlaylistFindManyArgs)
  async playlists(@common.Req() request: Request): Promise<Playlist[]> {
    const args = plainToClass(PlaylistFindManyArgs, request.query);
    return this.service.playlists({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Playlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async playlist(
    @common.Param() params: PlaylistWhereUniqueInput
  ): Promise<Playlist | null> {
    const result = await this.service.playlist({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Playlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlaylist(
    @common.Param() params: PlaylistWhereUniqueInput,
    @common.Body() data: PlaylistUpdateInput
  ): Promise<Playlist | null> {
    try {
      return await this.service.updatePlaylist({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Playlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlaylist(
    @common.Param() params: PlaylistWhereUniqueInput
  ): Promise<Playlist | null> {
    try {
      return await this.service.deletePlaylist({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tracks")
  @ApiNestedQuery(TrackFindManyArgs)
  async findTracks(
    @common.Req() request: Request,
    @common.Param() params: PlaylistWhereUniqueInput
  ): Promise<Track[]> {
    const query = plainToClass(TrackFindManyArgs, request.query);
    const results = await this.service.findTracks(params.id, {
      ...query,
      select: {
        album: true,
        artist: true,
        createdAt: true,
        duration: true,
        genre: true,
        id: true,

        playlist: {
          select: {
            id: true,
          },
        },

        singers: true,
        title: true,
        updatedAt: true,
        url: true,
        userId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tracks")
  async connectTracks(
    @common.Param() params: PlaylistWhereUniqueInput,
    @common.Body() body: TrackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tracks: {
        connect: body,
      },
    };
    await this.service.updatePlaylist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tracks")
  async updateTracks(
    @common.Param() params: PlaylistWhereUniqueInput,
    @common.Body() body: TrackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tracks: {
        set: body,
      },
    };
    await this.service.updatePlaylist({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tracks")
  async disconnectTracks(
    @common.Param() params: PlaylistWhereUniqueInput,
    @common.Body() body: TrackWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tracks: {
        disconnect: body,
      },
    };
    await this.service.updatePlaylist({
      where: params,
      data,
      select: { id: true },
    });
  }
}
